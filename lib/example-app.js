"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const calculations_1 = require("./calculations");
const interface_1 = require("./interface");
// use all default options
const calculateElo = (0, calculations_1.getEloCalculation)();
/**
 * Starting Elos of player A and player B
 */
const startingA = 1000;
const startingB = 1000;
const matchOutcomes = [];
const numMatchesToPlay = 1000;
for (let i = 0; i < numMatchesToPlay; i += 1) {
    /**
     * Each player has a 50/50 change to win, since they're starting at the same elo. In
     * reality, the probability of winning with change after each match corresponding to the Elo
     * gain/loss.
     */
    const singleResult = Math.random() > 0.5 ? interface_1.Outcome.Win : interface_1.Outcome.Loss;
    matchOutcomes.push(singleResult);
}
const aWins = matchOutcomes.filter((o) => o === interface_1.Outcome.Win).length;
const bWins = matchOutcomes.length - aWins;
const { eloA: finalA, eloB: finalB } = matchOutcomes.reduce((acc, curr) => calculateElo(acc.eloA, acc.eloB, curr), { eloA: startingA, eloB: startingB });
console.log([
    `Player A won ${aWins} matches moving their Elo from ${startingA} => ${finalA}`,
    `Player B won ${bWins} matches moving their Elo from ${startingB} => ${finalB}`,
].join('\n'));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZS1hcHAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZXhhbXBsZS1hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBbUQ7QUFDbkQsMkNBQWlEO0FBRWpELDBCQUEwQjtBQUMxQixNQUFNLFlBQVksR0FBRyxJQUFBLGdDQUFpQixHQUFFLENBQUM7QUFFekM7O0dBRUc7QUFDSCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFDdkIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDO0FBRXZCLE1BQU0sYUFBYSxHQUFjLEVBQUUsQ0FBQztBQUVwQyxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUU5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUM1Qzs7OztPQUlHO0lBQ0gsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsbUJBQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLG1CQUFPLENBQUMsSUFBSSxDQUFBO0lBRXJFLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7Q0FDbEM7QUFFRCxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssbUJBQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDcEUsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFFM0MsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQVksQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUVwSyxPQUFPLENBQUMsR0FBRyxDQUNUO0lBQ0UsZ0JBQWdCLEtBQUssa0NBQWtDLFNBQVMsT0FBTyxNQUFNLEVBQUU7SUFDL0UsZ0JBQWdCLEtBQUssa0NBQWtDLFNBQVMsT0FBTyxNQUFNLEVBQUU7Q0FDaEYsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQ2IsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEVsb0NhbGN1bGF0aW9uIH0gZnJvbSAnLi9jYWxjdWxhdGlvbnMnO1xuaW1wb3J0IHsgT3V0Y29tZSwgTmV3U2NvcmVzIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuXG4vLyB1c2UgYWxsIGRlZmF1bHQgb3B0aW9uc1xuY29uc3QgY2FsY3VsYXRlRWxvID0gZ2V0RWxvQ2FsY3VsYXRpb24oKTtcblxuLyoqXG4gKiBTdGFydGluZyBFbG9zIG9mIHBsYXllciBBIGFuZCBwbGF5ZXIgQlxuICovXG5jb25zdCBzdGFydGluZ0EgPSAxMDAwO1xuY29uc3Qgc3RhcnRpbmdCID0gMTAwMDtcblxuY29uc3QgbWF0Y2hPdXRjb21lczogT3V0Y29tZVtdID0gW107XG5cbmNvbnN0IG51bU1hdGNoZXNUb1BsYXkgPSAxMDAwO1xuXG5mb3IgKGxldCBpID0gMDsgaSA8IG51bU1hdGNoZXNUb1BsYXk7IGkgKz0gMSkge1xuICAvKipcbiAgICogRWFjaCBwbGF5ZXIgaGFzIGEgNTAvNTAgY2hhbmdlIHRvIHdpbiwgc2luY2UgdGhleSdyZSBzdGFydGluZyBhdCB0aGUgc2FtZSBlbG8uIEluXG4gICAqIHJlYWxpdHksIHRoZSBwcm9iYWJpbGl0eSBvZiB3aW5uaW5nIHdpdGggY2hhbmdlIGFmdGVyIGVhY2ggbWF0Y2ggY29ycmVzcG9uZGluZyB0byB0aGUgRWxvXG4gICAqIGdhaW4vbG9zcy5cbiAgICovXG4gIGNvbnN0IHNpbmdsZVJlc3VsdCA9IE1hdGgucmFuZG9tKCkgPiAwLjUgPyBPdXRjb21lLldpbiA6IE91dGNvbWUuTG9zc1xuXG4gIG1hdGNoT3V0Y29tZXMucHVzaChzaW5nbGVSZXN1bHQpO1xufVxuXG5jb25zdCBhV2lucyA9IG1hdGNoT3V0Y29tZXMuZmlsdGVyKChvKSA9PiBvID09PSBPdXRjb21lLldpbikubGVuZ3RoO1xuY29uc3QgYldpbnMgPSBtYXRjaE91dGNvbWVzLmxlbmd0aCAtIGFXaW5zO1xuXG5jb25zdCB7IGVsb0E6IGZpbmFsQSwgZWxvQjogZmluYWxCIH0gPSBtYXRjaE91dGNvbWVzLnJlZHVjZTxOZXdTY29yZXM+KChhY2MsIGN1cnIpID0+IGNhbGN1bGF0ZUVsbyhhY2MuZWxvQSwgYWNjLmVsb0IsIGN1cnIpLCB7IGVsb0E6IHN0YXJ0aW5nQSwgZWxvQjogc3RhcnRpbmdCIH0pO1xuXG5jb25zb2xlLmxvZyhcbiAgW1xuICAgIGBQbGF5ZXIgQSB3b24gJHthV2luc30gbWF0Y2hlcyBtb3ZpbmcgdGhlaXIgRWxvIGZyb20gJHtzdGFydGluZ0F9ID0+ICR7ZmluYWxBfWAsXG4gICAgYFBsYXllciBCIHdvbiAke2JXaW5zfSBtYXRjaGVzIG1vdmluZyB0aGVpciBFbG8gZnJvbSAke3N0YXJ0aW5nQn0gPT4gJHtmaW5hbEJ9YCxcbiAgXS5qb2luKCdcXG4nKVxuKVxuIl19