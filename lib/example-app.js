"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const calculations_1 = require("./calculations");
const interface_1 = require("./interface");
// use all default options
const calculateElo = (0, calculations_1.getEloCalculation)();
const adjustRatingFromOutcomes = (playerA, playerB, matchOutcomes) => {
    const initialRatings = { eloA: playerA, eloB: playerB };
    return matchOutcomes.reduce((acc, curr) => calculateElo(acc.eloA, acc.eloB, curr), initialRatings);
};
/**
 * Starting Elos of player A and player B
 */
const startingA = 1000;
const startingB = 1000;
const matchOutcomes = [];
const numMatchesToPlay = 1000;
for (let i = 0; i < numMatchesToPlay; i += 1) {
    /**
     * Each player has a 50/50 change to win, since they're starting at the same elo. In
     * reality, the probability of winning with change after each match corresponding to the Elo
     * gain/loss.
     */
    const singleResult = Math.random() > 0.5 ? interface_1.Outcome.Win : interface_1.Outcome.Loss;
    matchOutcomes.push(singleResult);
}
const aWins = matchOutcomes.reduce((acc, curr) => acc + (curr === interface_1.Outcome.Win ? 1 : 0), 0);
const bWins = matchOutcomes.length - aWins;
const { eloA: finalA, eloB: finalB } = adjustRatingFromOutcomes(startingA, startingB, matchOutcomes);
console.log([
    `Player A won ${aWins} matches moving their Elo from ${startingA} => ${finalA}`,
    `Player B won ${bWins} matches moving their Elo from ${startingB} => ${finalB}`,
].join('\n'));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZS1hcHAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZXhhbXBsZS1hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBbUQ7QUFDbkQsMkNBQWlEO0FBRWpELDBCQUEwQjtBQUMxQixNQUFNLFlBQVksR0FBRyxJQUFBLGdDQUFpQixHQUFFLENBQUM7QUFFekMsTUFBTSx3QkFBd0IsR0FBRyxDQUFDLE9BQWUsRUFBRSxPQUFlLEVBQUUsYUFBd0IsRUFBYSxFQUFFO0lBQ3pHLE1BQU0sY0FBYyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7SUFFeEQsT0FBTyxhQUFhLENBQUMsTUFBTSxDQUN6QixDQUFDLEdBQUcsRUFBRSxJQUFhLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQzlELGNBQWMsQ0FDZixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFDdkIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDO0FBRXZCLE1BQU0sYUFBYSxHQUFjLEVBQUUsQ0FBQztBQUVwQyxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUU5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUM1Qzs7OztPQUlHO0lBQ0gsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsbUJBQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLG1CQUFPLENBQUMsSUFBSSxDQUFBO0lBRXJFLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7Q0FDbEM7QUFFRCxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxLQUFLLG1CQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNGLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBRTNDLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBYyx3QkFBd0IsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBRWhILE9BQU8sQ0FBQyxHQUFHLENBQ1Q7SUFDRSxnQkFBZ0IsS0FBSyxrQ0FBa0MsU0FBUyxPQUFPLE1BQU0sRUFBRTtJQUMvRSxnQkFBZ0IsS0FBSyxrQ0FBa0MsU0FBUyxPQUFPLE1BQU0sRUFBRTtDQUNoRixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDYixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RWxvQ2FsY3VsYXRpb24gfSBmcm9tICcuL2NhbGN1bGF0aW9ucyc7XG5pbXBvcnQgeyBPdXRjb21lLCBOZXdTY29yZXMgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5cbi8vIHVzZSBhbGwgZGVmYXVsdCBvcHRpb25zXG5jb25zdCBjYWxjdWxhdGVFbG8gPSBnZXRFbG9DYWxjdWxhdGlvbigpO1xuXG5jb25zdCBhZGp1c3RSYXRpbmdGcm9tT3V0Y29tZXMgPSAocGxheWVyQTogbnVtYmVyLCBwbGF5ZXJCOiBudW1iZXIsIG1hdGNoT3V0Y29tZXM6IE91dGNvbWVbXSk6IE5ld1Njb3JlcyA9PiB7XG4gIGNvbnN0IGluaXRpYWxSYXRpbmdzID0geyBlbG9BOiBwbGF5ZXJBLCBlbG9COiBwbGF5ZXJCIH07XG5cbiAgcmV0dXJuIG1hdGNoT3V0Y29tZXMucmVkdWNlPE5ld1Njb3Jlcz4oXG4gICAgKGFjYywgY3VycjogT3V0Y29tZSkgPT4gY2FsY3VsYXRlRWxvKGFjYy5lbG9BLCBhY2MuZWxvQiwgY3VyciksXG4gICAgaW5pdGlhbFJhdGluZ3MsXG4gICk7XG59O1xuXG4vKipcbiAqIFN0YXJ0aW5nIEVsb3Mgb2YgcGxheWVyIEEgYW5kIHBsYXllciBCXG4gKi9cbmNvbnN0IHN0YXJ0aW5nQSA9IDEwMDA7XG5jb25zdCBzdGFydGluZ0IgPSAxMDAwO1xuXG5jb25zdCBtYXRjaE91dGNvbWVzOiBPdXRjb21lW10gPSBbXTtcblxuY29uc3QgbnVtTWF0Y2hlc1RvUGxheSA9IDEwMDA7XG5cbmZvciAobGV0IGkgPSAwOyBpIDwgbnVtTWF0Y2hlc1RvUGxheTsgaSArPSAxKSB7XG4gIC8qKlxuICAgKiBFYWNoIHBsYXllciBoYXMgYSA1MC81MCBjaGFuZ2UgdG8gd2luLCBzaW5jZSB0aGV5J3JlIHN0YXJ0aW5nIGF0IHRoZSBzYW1lIGVsby4gSW5cbiAgICogcmVhbGl0eSwgdGhlIHByb2JhYmlsaXR5IG9mIHdpbm5pbmcgd2l0aCBjaGFuZ2UgYWZ0ZXIgZWFjaCBtYXRjaCBjb3JyZXNwb25kaW5nIHRvIHRoZSBFbG9cbiAgICogZ2Fpbi9sb3NzLlxuICAgKi9cbiAgY29uc3Qgc2luZ2xlUmVzdWx0ID0gTWF0aC5yYW5kb20oKSA+IDAuNSA/IE91dGNvbWUuV2luIDogT3V0Y29tZS5Mb3NzXG5cbiAgbWF0Y2hPdXRjb21lcy5wdXNoKHNpbmdsZVJlc3VsdCk7XG59XG5cbmNvbnN0IGFXaW5zID0gbWF0Y2hPdXRjb21lcy5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgKGN1cnIgPT09IE91dGNvbWUuV2luID8gMSA6IDApLCAwKTtcbmNvbnN0IGJXaW5zID0gbWF0Y2hPdXRjb21lcy5sZW5ndGggLSBhV2lucztcblxuY29uc3QgeyBlbG9BOiBmaW5hbEEsIGVsb0I6IGZpbmFsQiB9OiBOZXdTY29yZXMgPSBhZGp1c3RSYXRpbmdGcm9tT3V0Y29tZXMoc3RhcnRpbmdBLCBzdGFydGluZ0IsIG1hdGNoT3V0Y29tZXMpO1xuXG5jb25zb2xlLmxvZyhcbiAgW1xuICAgIGBQbGF5ZXIgQSB3b24gJHthV2luc30gbWF0Y2hlcyBtb3ZpbmcgdGhlaXIgRWxvIGZyb20gJHtzdGFydGluZ0F9ID0+ICR7ZmluYWxBfWAsXG4gICAgYFBsYXllciBCIHdvbiAke2JXaW5zfSBtYXRjaGVzIG1vdmluZyB0aGVpciBFbG8gZnJvbSAke3N0YXJ0aW5nQn0gPT4gJHtmaW5hbEJ9YCxcbiAgXS5qb2luKCdcXG4nKVxuKVxuIl19