"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEloCalculation = void 0;
/**
 * Calculate probability of win/loss; used in `adjustRating`
 */
const calculateExpectedOutcome = (firstRating, secondRating) => {
    return 1 / (1 + Math.pow(10, (firstRating - secondRating) / 400));
};
const adjustRating = (kValue, previousRating, expectedOutcome, actualOutcome) => previousRating + kValue * (expectedOutcome - actualOutcome);
/**
 * Get the function to compute new ratings for player A and player B.
 *
 * k value is a hint at the maximum adjustment possible per game. More experienced competitors
 * should use a lower k value sincetheir current ELO is closer to their actual, or true ELO.
 *
 * if a kValue isn't given, a reasonable default of 32 is used
 */
const getEloCalculation = ({ kValue } = { kValue: 32 }) => {
    const k = kValue !== null && kValue !== void 0 ? kValue : 32;
    /**
     * Outcome is with respect to player A, so e.g. Outcome.Win means that player A wins while player B loses
     */
    return (ratingA, ratingB, outcome) => {
        const expectedOutcomeA = calculateExpectedOutcome(ratingB, ratingA);
        const expectedOutcomeB = calculateExpectedOutcome(ratingA, ratingB);
        return {
            eloA: adjustRating(k, ratingA, expectedOutcomeA, outcome),
            eloB: adjustRating(k, ratingB, expectedOutcomeB, outcome)
        };
    };
};
exports.getEloCalculation = getEloCalculation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsY3VsYXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NhbGN1bGF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQTs7R0FFRztBQUNILE1BQU0sd0JBQXdCLEdBQUcsQ0FBQyxXQUFtQixFQUFFLFlBQW9CLEVBQVUsRUFBRTtJQUNyRixPQUFPLENBQUMsR0FBRyxDQUNULENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLFdBQVcsR0FBRyxZQUFZLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FDckQsQ0FBQTtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFHLENBQ25CLE1BQWMsRUFDZCxjQUFzQixFQUN0QixlQUF1QixFQUN2QixhQUFzQixFQUNkLEVBQUUsQ0FBQyxjQUFjLEdBQUcsTUFBTSxHQUFHLENBQUMsZUFBZSxHQUFHLGFBQWEsQ0FBQyxDQUFDO0FBR3pFOzs7Ozs7O0dBT0c7QUFDSSxNQUFNLGlCQUFpQixHQUFHLENBQUMsRUFBRSxNQUFNLEtBQXVCLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7SUFDakYsTUFBTSxDQUFDLEdBQUcsTUFBTSxhQUFOLE1BQU0sY0FBTixNQUFNLEdBQUksRUFBRSxDQUFDO0lBRXZCOztPQUVHO0lBQ0gsT0FBTyxDQUFDLE9BQWUsRUFBRSxPQUFlLEVBQUUsT0FBZ0IsRUFBVSxFQUFFO1FBQ3BFLE1BQU0sZ0JBQWdCLEdBQUcsd0JBQXdCLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sZ0JBQWdCLEdBQUcsd0JBQXdCLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRXBFLE9BQU87WUFDTCxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDO1lBQ3pELElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLENBQUM7U0FDMUQsQ0FBQztJQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQTtBQWZZLFFBQUEsaUJBQWlCLHFCQWU3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsb1N5c3RlbU9wdGlvbnMsIE91dGNvbWUsIFJlc3VsdCB9IGZyb20gJy4vaW50ZXJmYWNlJztcblxuLyoqXG4gKiBDYWxjdWxhdGUgcHJvYmFiaWxpdHkgb2Ygd2luL2xvc3M7IHVzZWQgaW4gYGFkanVzdFJhdGluZ2BcbiAqL1xuY29uc3QgY2FsY3VsYXRlRXhwZWN0ZWRPdXRjb21lID0gKGZpcnN0UmF0aW5nOiBudW1iZXIsIHNlY29uZFJhdGluZzogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIDEgLyAoXG4gICAgMSArIE1hdGgucG93KDEwLCAoZmlyc3RSYXRpbmcgLSBzZWNvbmRSYXRpbmcpIC8gNDAwKVxuICApXG59O1xuXG5jb25zdCBhZGp1c3RSYXRpbmcgPSAoXG4gIGtWYWx1ZTogbnVtYmVyLFxuICBwcmV2aW91c1JhdGluZzogbnVtYmVyLFxuICBleHBlY3RlZE91dGNvbWU6IG51bWJlcixcbiAgYWN0dWFsT3V0Y29tZTogT3V0Y29tZSxcbik6IG51bWJlciA9PiBwcmV2aW91c1JhdGluZyArIGtWYWx1ZSAqIChleHBlY3RlZE91dGNvbWUgLSBhY3R1YWxPdXRjb21lKTtcblxuXG4vKipcbiAqIEdldCB0aGUgZnVuY3Rpb24gdG8gY29tcHV0ZSBuZXcgcmF0aW5ncyBmb3IgcGxheWVyIEEgYW5kIHBsYXllciBCLlxuICpcbiAqIGsgdmFsdWUgaXMgYSBoaW50IGF0IHRoZSBtYXhpbXVtIGFkanVzdG1lbnQgcG9zc2libGUgcGVyIGdhbWUuIE1vcmUgZXhwZXJpZW5jZWQgY29tcGV0aXRvcnNcbiAqIHNob3VsZCB1c2UgYSBsb3dlciBrIHZhbHVlIHNpbmNldGhlaXIgY3VycmVudCBFTE8gaXMgY2xvc2VyIHRvIHRoZWlyIGFjdHVhbCwgb3IgdHJ1ZSBFTE8uXG4gKlxuICogaWYgYSBrVmFsdWUgaXNuJ3QgZ2l2ZW4sIGEgcmVhc29uYWJsZSBkZWZhdWx0IG9mIDMyIGlzIHVzZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGdldEVsb0NhbGN1bGF0aW9uID0gKHsga1ZhbHVlIH06IEVsb1N5c3RlbU9wdGlvbnMgPSB7IGtWYWx1ZTogMzIgfSkgPT4ge1xuICBjb25zdCBrID0ga1ZhbHVlID8/IDMyO1xuXG4gIC8qKlxuICAgKiBPdXRjb21lIGlzIHdpdGggcmVzcGVjdCB0byBwbGF5ZXIgQSwgc28gZS5nLiBPdXRjb21lLldpbiBtZWFucyB0aGF0IHBsYXllciBBIHdpbnMgd2hpbGUgcGxheWVyIEIgbG9zZXNcbiAgICovXG4gIHJldHVybiAocmF0aW5nQTogbnVtYmVyLCByYXRpbmdCOiBudW1iZXIsIG91dGNvbWU6IE91dGNvbWUpOiBSZXN1bHQgPT4ge1xuICAgIGNvbnN0IGV4cGVjdGVkT3V0Y29tZUEgPSBjYWxjdWxhdGVFeHBlY3RlZE91dGNvbWUocmF0aW5nQiwgcmF0aW5nQSk7XG4gICAgY29uc3QgZXhwZWN0ZWRPdXRjb21lQiA9IGNhbGN1bGF0ZUV4cGVjdGVkT3V0Y29tZShyYXRpbmdBLCByYXRpbmdCKTtcblxuICAgIHJldHVybiB7XG4gICAgICBlbG9BOiBhZGp1c3RSYXRpbmcoaywgcmF0aW5nQSwgZXhwZWN0ZWRPdXRjb21lQSwgb3V0Y29tZSksXG4gICAgICBlbG9COiBhZGp1c3RSYXRpbmcoaywgcmF0aW5nQiwgZXhwZWN0ZWRPdXRjb21lQiwgb3V0Y29tZSlcbiAgICB9O1xuICB9O1xufVxuXG5cblxuIl19